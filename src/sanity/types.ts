/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Room = {
  _id: string;
  _type: 'room';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  price?: number;
  isAvailable?: boolean;
  tenant?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'tenant';
  };
  mainImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
    _key: string;
  }>;
};

export type Tenant = {
  _id: string;
  _type: 'tenant';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  moveInDate?: string;
  slug?: Slug;
  email?: string;
  phone?: string;
  ssn?: string;
  roomNumber?: string;
  employmentInfo?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
  contract?: number;
};

export type ApplicationForm = {
  _id: string;
  _type: 'applicationForm';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  email?: string;
  preferredFloorPlan?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'floorPlan';
  };
  moveInDate?: string;
  employmentInfo?: string;
};

export type MaintainanceRequest = {
  _id: string;
  _type: 'maintainanceRequest';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  email?: string;
  phone?: string;
  roomNumber?: string;
  type?: 'plumbing' | 'electrical' | 'hvac' | 'appliances' | 'other';
  desc?: string;
};

export type Event = {
  _id: string;
  _type: 'event';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  date?: string;
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
  location?:
    | 'rooftop'
    | 'pool-area'
    | 'fitness-studio'
    | 'lounge-area'
    | 'the-grand-courtyard';
};

export type Newsletter = {
  _id: string;
  _type: 'newsletter';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email?: string;
};

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  subTitle?: string;
  category?: 'trends' | 'community' | 'living-tips';
  publishedDate?: string;
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
};

export type Service = {
  _id: string;
  _type: 'service';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  subTitle?: string;
  price?: number;
  features?: Array<string>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
  location?: string;
};

export type Neighborhood = {
  _id: string;
  _type: 'neighborhood';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  type?: 'dining' | 'fitness' | 'shopping' | 'park';
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
  link?: string;
};

export type Gallery = {
  _id: string;
  _type: 'gallery';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  mainImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
    _key: string;
  }>;
};

export type Amenity = {
  _id: string;
  _type: 'amenity';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  floorLevel?: number;
  subTitle?: string;
  features?: Array<string>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
};

export type Contact = {
  _id: string;
  _type: 'contact';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  phone?: string;
  message?: string;
};

export type FloorPlan = {
  _id: string;
  _type: 'floorPlan';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  type?: 'one-bed' | 'two-bed' | 'studio';
  bedroom?: number;
  bathroom?: number;
  price?: number;
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  availableUnit?: number;
  features?: Array<string>;
  squareFeet?: number;
  subTitle?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type TeamMember = {
  _id: string;
  _type: 'teamMember';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  position?: string;
  socialLink?: string;
  bio?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'blockImage';
  };
};

export type BlockImage = {
  _type: 'blockImage';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Room
  | Tenant
  | ApplicationForm
  | MaintainanceRequest
  | Event
  | Newsletter
  | Blog
  | Service
  | Neighborhood
  | Gallery
  | Amenity
  | Contact
  | FloorPlan
  | BlockContent
  | TeamMember
  | BlockImage
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: ALL_FLOOR_PLANS_QUERY
// Query: *[_type == 'floorPlan'  && defined(slug.current)]  | order(name desc){    name,    slug,    bedroom,    type,    bathroom,    price,    mainImage{      alt,      asset->{url}    },    desc,    features,    squareFeet,    subTitle  }
export type ALL_FLOOR_PLANS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  bedroom: number | null;
  type: 'one-bed' | 'studio' | 'two-bed' | null;
  bathroom: number | null;
  price: number | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  desc: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
  features: Array<string> | null;
  squareFeet: number | null;
  subTitle: string | null;
}>;
// Variable: ALL_BLOGS_QUERY
// Query: *[_type == 'blog' && defined(slug.current)]| order(publishedDate desc){  name,  subtitle,  mainImage{    alt,    asset->{url}  },  subTitle,  category,  slug,  publishedDate}
export type ALL_BLOGS_QUERYResult = Array<{
  name: string | null;
  subtitle: null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  subTitle: string | null;
  category: 'community' | 'living-tips' | 'trends' | null;
  slug: Slug | null;
  publishedDate: string | null;
}>;
// Variable: ALL_TEAM_MEMBERS_QUERY
// Query: *[_type == 'teamMember' && defined(slug.current)]| order(name desc){  name,  position,  slug,  bio,  mainImage{    alt,    asset->{url}  },  socialLink}
export type ALL_TEAM_MEMBERS_QUERYResult = Array<{
  name: string | null;
  position: string | null;
  slug: Slug | null;
  bio: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  socialLink: string | null;
}>;
// Variable: ALL_NEIGHBORHOODS_QUERY
// Query: *[_type == 'neighborhood' && defined(slug.current)]|order(name desc){  name,  slug,  mainImage{    alt,    asset->{url}  },  type,  link}
export type ALL_NEIGHBORHOODS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  type: 'dining' | 'fitness' | 'park' | 'shopping' | null;
  link: string | null;
}>;
// Variable: FLOOR_PLANS_QUERY
// Query: *[_type == 'floorPlan'  && defined(slug.current) && (  (!defined($filter))||  $filter match type ) ]  | order(name desc){    name,    slug,    bedroom,    type,    bathroom,    price,    mainImage{      alt,      asset->{url}    },    desc,    features,    squareFeet,    subTitle  }
export type FLOOR_PLANS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  bedroom: number | null;
  type: 'one-bed' | 'studio' | 'two-bed' | null;
  bathroom: number | null;
  price: number | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  desc: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
  features: Array<string> | null;
  squareFeet: number | null;
  subTitle: string | null;
}>;
// Variable: FLOOR_PLAN_QUERY
// Query: *[_type == 'floorPlan'  && slug.current == $slug]  [0]{    name,    slug,    bedroom,    type,    bathroom,    price,    mainImage{      alt,      asset->{url}    },    desc,    features,    squareFeet,    subTitle  }
export type FLOOR_PLAN_QUERYResult = {
  name: string | null;
  slug: Slug | null;
  bedroom: number | null;
  type: 'one-bed' | 'studio' | 'two-bed' | null;
  bathroom: number | null;
  price: number | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  desc: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
  features: Array<string> | null;
  squareFeet: number | null;
  subTitle: string | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == 'floorPlan' \n && defined(slug.current)]\n  | order(name desc){\n    name,\n    slug,\n    bedroom,\n    type,\n    bathroom,\n    price,\n    mainImage{\n      alt,\n      asset->{url}\n    },\n    desc,\n    features,\n    squareFeet,\n    subTitle\n  }": ALL_FLOOR_PLANS_QUERYResult;
    "*[_type == 'blog'\n && defined(slug.current)]\n| order(publishedDate desc){\n  name,\n  subtitle,\n  mainImage{\n    alt,\n    asset->{url}\n  },\n  subTitle,\n  category,\n  slug,\n  publishedDate\n}": ALL_BLOGS_QUERYResult;
    "*[_type == 'teamMember'\n && defined(slug.current)]\n| order(name desc){\n  name,\n  position,\n  slug,\n  bio,\n  mainImage{\n    alt,\n    asset->{url}\n  },\n  socialLink\n}": ALL_TEAM_MEMBERS_QUERYResult;
    "*[_type == 'neighborhood'\n && defined(slug.current)]\n|order(name desc){\n  name,\n  slug,\n  mainImage{\n    alt,\n    asset->{url}\n  },\n  type,\n  link\n}": ALL_NEIGHBORHOODS_QUERYResult;
    "*[_type == 'floorPlan' \n && defined(slug.current)\n && (\n  (!defined($filter))||\n  $filter match type\n )\n ]\n  | order(name desc){\n    name,\n    slug,\n    bedroom,\n    type,\n    bathroom,\n    price,\n    mainImage{\n      alt,\n      asset->{url}\n    },\n    desc,\n    features,\n    squareFeet,\n    subTitle\n  }": FLOOR_PLANS_QUERYResult;
    "*[_type == 'floorPlan' \n && slug.current == $slug]\n  [0]{\n    name,\n    slug,\n    bedroom,\n    type,\n    bathroom,\n    price,\n    mainImage{\n      alt,\n      asset->{url}\n    },\n    desc,\n    features,\n    squareFeet,\n    subTitle\n  }": FLOOR_PLAN_QUERYResult;
  }
}
